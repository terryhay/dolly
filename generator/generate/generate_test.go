package generate

import (
	"github.com/stretchr/testify/require"
	apConf "github.com/terryhay/dolly/argparser/arg_parser_config"
	confYML "github.com/terryhay/dolly/generator/config_yaml"
	"testing"
)

func TestGenerate(t *testing.T) {
	t.Parallel()

	command := "cmd"
	additionalCommand := "addcmd"
	commandDescriptionHelpInfo := "command description help info"

	helpCommand := "help"
	additionalHelpCommand := "addhelp"

	requiredFlag1 := "-" + "-rf1"
	requiredFlag1Description := &confYML.FlagDescription{
		Flag: requiredFlag1,
		ArgumentsDescription: &confYML.ArgumentsDescription{
			AmountType: apConf.ArgAmountTypeSingle,
			DefaultValues: []string{
				"f1DefValue",
			},
			AllowedValues: []string{
				"f1AllValue",
			},
		},
	}

	requiredFlag2 := "-" + "-rf2"
	requiredFlag2Description := &confYML.FlagDescription{
		Flag: requiredFlag2,
		ArgumentsDescription: &confYML.ArgumentsDescription{
			AmountType: apConf.ArgAmountTypeList,
			DefaultValues: []string{
				"f2DefValue",
			},
			AllowedValues: []string{
				"f2AllValue",
			},
		},
	}

	optionalFlag1 := "-" + "-of1"
	optionalFlag1Description := &confYML.FlagDescription{
		Flag: optionalFlag1,
	}

	optionalFlag2 := "-" + "-of2"
	optionalFlag2Description := &confYML.FlagDescription{
		Flag: optionalFlag2,
	}

	config := &confYML.ArgParserConfig{
		AppHelpDescription: &confYML.AppHelpDescription{},
		HelpCommandDescription: &confYML.HelpCommandDescription{
			Command: helpCommand,
			AdditionalCommands: []string{
				additionalHelpCommand,
			},
		},
		NamelessCommandDescription: &confYML.NamelessCommandDescription{
			ArgumentsDescription: &confYML.ArgumentsDescription{},
			RequiredFlags: []string{
				requiredFlag1,
				requiredFlag2,
			},
			OptionalFlags: []string{
				optionalFlag1,
				optionalFlag2,
			},
		},
		CommandDescriptions: []*confYML.CommandDescription{
			{
				Command: command,
				AdditionalCommands: []string{
					additionalCommand,
				},
				DescriptionHelpInfo: commandDescriptionHelpInfo,
				ArgumentsDescription: &confYML.ArgumentsDescription{
					AmountType: apConf.ArgAmountTypeSingle,
					DefaultValues: []string{
						"cmdDefValue",
					},
					AllowedValues: []string{
						"cmdAllValue",
					},
				},
				RequiredFlags: []string{
					requiredFlag1,
					requiredFlag2,
				},
				OptionalFlags: []string{
					optionalFlag1,
					optionalFlag2,
				},
			},
			{
				// fake empty command
				ArgumentsDescription: &confYML.ArgumentsDescription{
					AmountType: apConf.ArgAmountTypeList,
					DefaultValues: []string{
						"fakeEmptyCommandDefValue",
					},
					AllowedValues: []string{
						"fakeEmptyCommandAllValue",
					},
				},
			},
		},
		FlagDescriptions: []*confYML.FlagDescription{
			requiredFlag1Description,
			requiredFlag2Description,
			optionalFlag1Description,
			optionalFlag2Description,
		},
	}

	argParserFileText := Generate(
		config,
		&confYML.HelpOutConfig{
			UsingTool: confYML.HelpOutToolManStyle,
		},
		map[string]*confYML.FlagDescription{
			requiredFlag1: requiredFlag1Description,
			requiredFlag2: requiredFlag2Description,
			optionalFlag1: optionalFlag1Description,
			optionalFlag2: optionalFlag2Description,
		})

	expectedArgParserFileText := `// This code was generated by dolly.generator. DO NOT EDIT

package dolly

import (
	apConf "github.com/terryhay/dolly/argparser/arg_parser_config"
	parsed "github.com/terryhay/dolly/argparser/parsed_data"
	"github.com/terryhay/dolly/argparser/parser"
	"github.com/terryhay/dolly/man_style_help/page"
	pgv "github.com/terryhay/dolly/man_style_help/page_view"
	tbd "github.com/terryhay/dolly/man_style_help/termbox_decorator"
)

const (
	// CommandIDNamelessCommand - 
	CommandIDNamelessCommand apConf.CommandID = iota + 1
	//  - 
	
	// CommandIDCmd - command description help info
	CommandIDCmd
	// CommandIDPrintHelpInfo - print help info
	CommandIDPrintHelpInfo
)

const (
	//  - 
	 apConf.Command = ""
	// CommandAddcmd - command description help info
	CommandAddcmd = "addcmd"
	// CommandAddhelp - print help info
	CommandAddhelp = "addhelp"
	// CommandCmd - command description help info
	CommandCmd = "cmd"
	// CommandHelp - print help info
	CommandHelp = "help"
)

const (
	// FlagOf1 - 
	FlagOf1 apConf.Flag = "--of1"
	// FlagOf2 - 
	FlagOf2 = "--of2"
	// FlagRf1 - 
	FlagRf1 = "--rf1"
	// FlagRf2 - 
	FlagRf2 = "--rf2"
)

// Parse - processes command line arguments
func Parse(args []string) (*parsed.ParsedData, error) {
	appArgConfig := apConf.NewArgParserConfig(
		// appDescription
		apConf.ApplicationDescription{
			AppName: "",
			NameHelpInfo: "",
			DescriptionHelpInfo: nil,
		},
		// flagDescriptions
		map[apConf.Flag]*apConf.FlagDescription{
			FlagRf1: {
				DescriptionHelpInfo:  "",
				ArgDescription: &apConf.ArgumentsDescription{
					AmountType:              apConf.ArgAmountTypeSingle,
					SynopsisHelpDescription: "",
					DefaultValues: []string{
						"f1DefValue",
					},
					AllowedValues: map[string]bool{
						"f1AllValue": true,
					},
				},
			},
			FlagRf2: {
				DescriptionHelpInfo:  "",
				ArgDescription: &apConf.ArgumentsDescription{
					AmountType:              apConf.ArgAmountTypeList,
					SynopsisHelpDescription: "",
					DefaultValues: []string{
						"f2DefValue",
					},
					AllowedValues: map[string]bool{
						"f2AllValue": true,
					},
				},
			},
			FlagOf1: {
				DescriptionHelpInfo:  "",
			},
			FlagOf2: {
				DescriptionHelpInfo:  "",
			},
		},
		// commandDescriptions
		[]*apConf.CommandDescription{
			{
				ID:                  CommandIDCmd,
				DescriptionHelpInfo: "command description help info",
				Commands: map[apConf.Command]bool{
					CommandCmd: true,
					CommandAddcmd: true,
				},
				RequiredFlags: map[apConf.Flag]bool{
					FlagRf1: true,
					FlagRf2: true,
				},
				OptionalFlags: map[apConf.Flag]bool{
					FlagOf1: true,
					FlagOf2: true,
				},
			},
			{
				ID:                  ,
				DescriptionHelpInfo: "",
				Commands: map[apConf.Command]bool{
					: true,
				},
			},
		},
		// helpCommandDescription
		apConf.NewHelpCommandDescription(
			CommandIDPrintHelpInfo,
			map[apConf.Command]bool{
				CommandAddhelp: true,
				CommandHelp: true,
			},
		),
		// namelessCommandDescription
		apConf.NewNamelessCommandDescription(
			CommandIDNamelessCommand,
			"",
			&apConf.ArgumentsDescription{
				AmountType:              apConf.ArgAmountTypeNoArgs,
				SynopsisHelpDescription: "",
			},
			map[apConf.Flag]bool{
				FlagRf1: true,
				FlagRf2: true,
			},
			map[apConf.Flag]bool{
				FlagOf1: true,
				FlagOf2: true,
			},
		))

	res, err := parser.Parse(appArgConfig, args)
	if err != nil {
		return nil, err.Error()
	}

	if res.GetCommandID() == CommandIDPrintHelpInfo {
		var pageView pgv.PageView
		err = pageView.Init(tbd.NewTermBoxDecorator(nil), page.MakePage(appArgConfig))
		if err != nil {
			return nil, err.Error()
		}
		err = pageView.Run()
		if err != nil {
			return nil, err.Error()
		}

		return nil, nil
	}

	return res, nil
}
`
	require.Equal(t, expectedArgParserFileText, argParserFileText)
}

func TestGenerateWithoutNamelessCommand(t *testing.T) {
	t.Parallel()

	descriptionHelpInfo := "command description help info"

	helpCommand := "help"
	additionalHelpCommand := "addhelp"

	argParserFileText := Generate(
		&confYML.ArgParserConfig{
			AppHelpDescription: &confYML.AppHelpDescription{
				DescriptionHelpInfo: []string{
					descriptionHelpInfo,
				},
			},
			HelpCommandDescription: &confYML.HelpCommandDescription{
				Command: helpCommand,
				AdditionalCommands: []string{
					additionalHelpCommand,
				},
			},
		},
		&confYML.HelpOutConfig{
			UsingTool: confYML.HelpOutToolManStyle,
		},
		nil)

	require.Equal(t, `// This code was generated by dolly.generator. DO NOT EDIT

package dolly

import (
	apConf "github.com/terryhay/dolly/argparser/arg_parser_config"
	parsed "github.com/terryhay/dolly/argparser/parsed_data"
	"github.com/terryhay/dolly/argparser/parser"
	"github.com/terryhay/dolly/man_style_help/page"
	pgv "github.com/terryhay/dolly/man_style_help/page_view"
	tbd "github.com/terryhay/dolly/man_style_help/termbox_decorator"
)

const (
	// CommandIDPrintHelpInfo - print help info
	CommandIDPrintHelpInfo apConf.CommandID = iota + 1
)

const (
	// CommandAddhelp - print help info
	CommandAddhelp apConf.Command = "addhelp"
	// CommandHelp - print help info
	CommandHelp = "help"
)


// Parse - processes command line arguments
func Parse(args []string) (*parsed.ParsedData, error) {
	appArgConfig := apConf.NewArgParserConfig(
		// appDescription
		apConf.ApplicationDescription{
			AppName: "",
			NameHelpInfo: "",
			DescriptionHelpInfo: []string{
				"command description help info",
			},
		},
		// flagDescriptions
		nil,
		// commandDescriptions
		nil,
		// helpCommandDescription
		apConf.NewHelpCommandDescription(
			CommandIDPrintHelpInfo,
			map[apConf.Command]bool{
				CommandAddhelp: true,
				CommandHelp: true,
			},
		),
		// namelessCommandDescription
		nil)

	res, err := parser.Parse(appArgConfig, args)
	if err != nil {
		return nil, err.Error()
	}

	if res.GetCommandID() == CommandIDPrintHelpInfo {
		var pageView pgv.PageView
		err = pageView.Init(tbd.NewTermBoxDecorator(nil), page.MakePage(appArgConfig))
		if err != nil {
			return nil, err.Error()
		}
		err = pageView.Run()
		if err != nil {
			return nil, err.Error()
		}

		return nil, nil
	}

	return res, nil
}
`, argParserFileText)
}

func TestGenerateWithoutHelpCommandDescription(t *testing.T) {
	t.Parallel()

	argParserFileText := Generate(
		&confYML.ArgParserConfig{
			AppHelpDescription: &confYML.AppHelpDescription{
				DescriptionHelpInfo: []string{
					"command description help info",
				},
			},
			NamelessCommandDescription: &confYML.NamelessCommandDescription{
				DescriptionHelpInfo: "nameless command description help info",
			},
		},
		&confYML.HelpOutConfig{
			UsingTool: confYML.HelpOutToolManStyle,
		},
		nil)

	require.Equal(t, `// This code was generated by dolly.generator. DO NOT EDIT

package dolly

import (
	apConf "github.com/terryhay/dolly/argparser/arg_parser_config"
	parsed "github.com/terryhay/dolly/argparser/parsed_data"
	"github.com/terryhay/dolly/argparser/parser"
	"github.com/terryhay/dolly/man_style_help/page"
	pgv "github.com/terryhay/dolly/man_style_help/page_view"
	tbd "github.com/terryhay/dolly/man_style_help/termbox_decorator"
)

const (
	// CommandIDNamelessCommand - nameless command description help info
	CommandIDNamelessCommand apConf.CommandID = iota + 1
)



// Parse - processes command line arguments
func Parse(args []string) (*parsed.ParsedData, error) {
	appArgConfig := apConf.NewArgParserConfig(
		// appDescription
		apConf.ApplicationDescription{
			AppName: "",
			NameHelpInfo: "",
			DescriptionHelpInfo: []string{
				"command description help info",
			},
		},
		// flagDescriptions
		nil,
		// commandDescriptions
		nil,
		// helpCommandDescription
		nil,
		// namelessCommandDescription
		apConf.NewNamelessCommandDescription(
			CommandIDNamelessCommand,
			"nameless command description help info",
			 nil,
			nil,
			nil,
		))

	res, err := parser.Parse(appArgConfig, args)
	if err != nil {
		return nil, err.Error()
	}

	if res.GetCommandID() ==  {
		var pageView pgv.PageView
		err = pageView.Init(tbd.NewTermBoxDecorator(nil), page.MakePage(appArgConfig))
		if err != nil {
			return nil, err.Error()
		}
		err = pageView.Run()
		if err != nil {
			return nil, err.Error()
		}

		return nil, nil
	}

	return res, nil
}
`, argParserFileText)
}

func TestNilInputData(t *testing.T) {
	t.Parallel()

	argParserFileText := Generate(nil, nil, nil)

	require.Equal(t, `// This code was generated by dolly.generator. DO NOT EDIT

package dolly

import (
	apConf "github.com/terryhay/dolly/argparser/arg_parser_config"
	parsed "github.com/terryhay/dolly/argparser/parsed_data"
	"github.com/terryhay/dolly/argparser/parser"
	helpOut "github.com/terryhay/dolly/argparser/plain_help_out"
)




// Parse - processes command line arguments
func Parse(args []string) (*parsed.ParsedData, error) {
	appArgConfig := apConf.NewArgParserConfig(
		// appDescription
		apConf.ApplicationDescription{
			AppName: "",
			NameHelpInfo: "",
			DescriptionHelpInfo: nil,
		},
		// flagDescriptions
		nil,
		// commandDescriptions
		nil,
		// helpCommandDescription
		nil,
		// namelessCommandDescription
		nil)

	res, err := parser.Parse(appArgConfig, args)
	if err != nil {
		return nil, err.Error()
	}

	if res.GetCommandID() ==  {
		helpOut.PrintHelpInfo(appArgConfig)
		return nil, nil
	}

	return res, nil
}
`, argParserFileText)
}
