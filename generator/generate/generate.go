package generate

import (
	"strings"

	ce "github.com/terryhay/dolly/generator/config_entity"
	"github.com/terryhay/dolly/tools/size"
	sbt "github.com/terryhay/dolly/tools/string_builder_tools"
)

// Generate creates dolly.go file text body
func Generate(configEntity ce.ConfigEntity) string {
	marginDecl := size.WidthZero
	marginBody := marginDecl + size.WidthTab

	// builder must be a pointer
	builder := &strings.Builder{}

	builder = sbt.Append(builder, "// This code was generated by dolly.generator. DO NOT EDIT")
	builder = sbt.BreakRow(builder)
	builder = sbt.NewRow(builder, marginDecl, "package dolly")
	builder = sbt.BreakRow(builder)

	builder = appendImports(builder, configEntity.GetConfig().GetHelpOutConfig().GetUsingTool())

	builder = appendNameAppConstant(builder, configEntity.GetConfig().GetArgParserConfig().GetAppHelp().GetApplicationName())
	builder = appendCommandConstants(builder, configEntity.GetGenCompCommandsSorted())
	builder = appendPlaceholderConstants(builder, configEntity.GetGenCompPlaceholdersSorted())
	builder = appendFlagConstants(builder, configEntity.GetGenCompFlagsSorted())

	builder = sbt.NewRow(builder, marginDecl, "// Parse processes command line arguments")
	builder = sbt.NewRow(builder, marginDecl, "func Parse(args []string) (*parsed.Result, error) {")
	builder = sbt.NewRow(builder, marginBody, "appArgConfig := apConf.MakeArgParserConfig(apConf.ArgParserConfigOpt{")
	{
		builder = appendApplication(builder, marginBody+size.WidthTab, configEntity.GetConfig().GetArgParserConfig().GetAppHelp())
		builder = appendChapterDescriptionInfo(builder, marginBody+size.WidthTab, configEntity.GetConfig().GetArgParserConfig().GetChapterDescriptionInfo())
		builder = appendNamelessCommand(builder, marginBody+size.WidthTab, configEntity)
		builder = appendCommands(builder, marginBody+size.WidthTab, configEntity)
		builder = appendHelpOutCommand(builder, marginBody+size.WidthTab, configEntity)
	}
	builder = sbt.NewRow(builder, marginBody, "})")
	builder = sbt.BreakRow(builder)
	builder = sbt.NewRow(builder, marginBody, "res, errParse := parser.Parse(appArgConfig, args)")
	builder = sbt.NewRow(builder, marginBody, "if errParse != nil {")
	builder = sbt.NewRow(builder, marginBody+size.WidthTab, "return nil, errParse")
	builder = sbt.NewRow(builder, marginBody, "}")
	builder = sbt.BreakRow(builder)
	builder = sbt.NewRow(builder, marginBody, "if res.GetCommandMainName() == ",
		configEntity.GenCompCommandByName(configEntity.GetConfig().GetArgParserConfig().GetHelpCommand().GetMainName()).GetNameID(),
		" {")
	builder = appendHelpOutEntity(builder, configEntity.GetConfig().GetHelpOutConfig().GetUsingTool())
	builder = sbt.NewRow(builder, marginBody, "}")
	builder = sbt.BreakRow(builder)
	builder = sbt.NewRow(builder, marginBody, "return res, nil")
	builder = sbt.NewRow(builder, marginDecl, "}")

	return builder.String()
}
