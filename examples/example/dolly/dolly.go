// This code was generated by dolly.generator. DO NOT EDIT

package dolly

import (
	apConf "github.com/terryhay/dolly/argparser/arg_parser_config"
	parsed "github.com/terryhay/dolly/argparser/parsed_data"
	"github.com/terryhay/dolly/argparser/parser"
	"github.com/terryhay/dolly/man_style_help/page"
	pgv "github.com/terryhay/dolly/man_style_help/page_view"
	tbd "github.com/terryhay/dolly/man_style_help/termbox_decorator"
)

const (
	// CommandIDNamelessCommand - checks arguments types
	CommandIDNamelessCommand apConf.CommandID = iota + 1
	// CommandIDPrintHelpInfo - print help info
	CommandIDPrintHelpInfo
	// CommandIDPrint - print command line arguments with optional checking
	CommandIDPrint
)

const (
	// CommandHLw - print help info
	CommandHLw apConf.Command = "-h"
	// CommandHelp - print help info
	CommandHelp = "help"
	// CommandPrint - print command line arguments with optional checking
	CommandPrint = "print"
)

const (
	// FlagCheckargs - do arguments checking
	FlagCheckargs apConf.Flag = "-checkargs"
	// FlagFLw - single float
	FlagFLw = "-f"
	// FlagFl - float list
	FlagFl = "-fl"
	// FlagILw - int string
	FlagILw = "-i"
	// FlagIl - int list
	FlagIl = "-il"
	// FlagSLw - single string
	FlagSLw = "-s"
	// FlagSl - string list
	FlagSl = "-sl"
)

// Parse - processes command line arguments
func Parse(args []string) (*parsed.ParsedData, error) {
	appArgConfig := apConf.ArgParserConfigSrc{
		AppDescription: apConf.ApplicationDescriptionSrc{
			AppName:      "example",
			NameHelpInfo: "shows how parser generator works",
			DescriptionHelpInfo: []string{
				"you can write more detailed description here",
				"and use several paragraphs",
			},
		}.ToConst(),
		FlagDescriptionSlice: []*apConf.FlagDescription{
			apConf.FlagDescriptionSrc{
				Flags: []apConf.Flag{
					FlagSLw,
				},
				DescriptionHelpInfo: "single string",
				ArgDescription: apConf.ArgumentsDescriptionSrc{
					AmountType:              apConf.ArgAmountTypeSingle,
					SynopsisHelpDescription: "str",
				}.ToConstPtr(),
			}.ToConstPtr(),
			apConf.FlagDescriptionSrc{
				Flags: []apConf.Flag{
					FlagSl,
				},
				DescriptionHelpInfo: "string list",
				ArgDescription: apConf.ArgumentsDescriptionSrc{
					AmountType:              apConf.ArgAmountTypeList,
					SynopsisHelpDescription: "str",
				}.ToConstPtr(),
			}.ToConstPtr(),
			apConf.FlagDescriptionSrc{
				Flags: []apConf.Flag{
					FlagILw,
				},
				DescriptionHelpInfo: "int string",
				ArgDescription: apConf.ArgumentsDescriptionSrc{
					AmountType:              apConf.ArgAmountTypeSingle,
					SynopsisHelpDescription: "str",
				}.ToConstPtr(),
			}.ToConstPtr(),
			apConf.FlagDescriptionSrc{
				Flags: []apConf.Flag{
					FlagIl,
				},
				DescriptionHelpInfo: "int list",
				ArgDescription: apConf.ArgumentsDescriptionSrc{
					AmountType:              apConf.ArgAmountTypeList,
					SynopsisHelpDescription: "str",
				}.ToConstPtr(),
			}.ToConstPtr(),
			apConf.FlagDescriptionSrc{
				Flags: []apConf.Flag{
					FlagFLw,
				},
				DescriptionHelpInfo: "single float",
				ArgDescription: apConf.ArgumentsDescriptionSrc{
					AmountType:              apConf.ArgAmountTypeSingle,
					SynopsisHelpDescription: "str",
				}.ToConstPtr(),
			}.ToConstPtr(),
			apConf.FlagDescriptionSrc{
				Flags: []apConf.Flag{
					FlagFl,
				},
				DescriptionHelpInfo: "float list",
				ArgDescription: apConf.ArgumentsDescriptionSrc{
					AmountType:              apConf.ArgAmountTypeList,
					SynopsisHelpDescription: "str",
				}.ToConstPtr(),
			}.ToConstPtr(),
			apConf.FlagDescriptionSrc{
				Flags: []apConf.Flag{
					FlagCheckargs,
				},
				DescriptionHelpInfo: "do arguments checking",
			}.ToConstPtr(),
		},
		CommandDescriptions: []*apConf.CommandDescription{
			apConf.CommandDescriptionSrc{
				ID:                  CommandIDPrint,
				DescriptionHelpInfo: "print command line arguments with optional checking",
				Commands: map[apConf.Command]bool{
					CommandPrint: true,
				},
				OptionalFlags: map[apConf.Flag]bool{
					FlagSLw:       true,
					FlagSl:        true,
					FlagILw:       true,
					FlagIl:        true,
					FlagFLw:       true,
					FlagFl:        true,
					FlagCheckargs: true,
				},
			}.ToConstPtr(),
		},
		HelpCommandDescription: apConf.NewHelpCommandDescription(
			CommandIDPrintHelpInfo,
			map[apConf.Command]bool{
				CommandHLw:  true,
				CommandHelp: true,
			},
		),
		NamelessCommandDescription: apConf.NewNamelessCommandDescription(
			CommandIDNamelessCommand,
			"checks arguments types",
			nil,
			nil,
			map[apConf.Flag]bool{
				FlagSl: true,
				FlagIl: true,
				FlagFl: true,
			},
		)}.ToConst()

	res, err := parser.Parse(appArgConfig, args)
	if err != nil {
		return nil, err.Error()
	}

	if res.GetCommandID() == CommandIDPrintHelpInfo {
		var pageView pgv.PageView
		err = pageView.Init(tbd.NewTermBoxDecorator(nil), page.MakePage(appArgConfig))
		if err != nil {
			return nil, err.Error()
		}
		err = pageView.Run()
		if err != nil {
			return nil, err.Error()
		}

		return nil, nil
	}

	return res, nil
}
