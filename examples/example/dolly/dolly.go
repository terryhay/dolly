// This code was generated by parser.generator. DO NOT EDIT

package dolly

import (
	"github.com/terryhay/dolly/pkg/dollyconf"
	"github.com/terryhay/dolly/pkg/dollyerr"
	"github.com/terryhay/dolly/pkg/helpdisplay/data"
	tbd "github.com/terryhay/dolly/pkg/helpdisplay/termbox_decorator"
	"github.com/terryhay/dolly/pkg/helpdisplay/views"
	"github.com/terryhay/dolly/pkg/parsed_data"
	"github.com/terryhay/dolly/pkg/parser"
)

const (
	// CommandIDNamelessCommand - checks arguments types
	CommandIDNamelessCommand dollyconf.CommandID = iota + 1
	// CommandIDPrintHelpInfo - print help info
	CommandIDPrintHelpInfo
	// CommandIDPrint - print command line arguments with optional checking
	CommandIDPrint
)

const (
	// CommandH - print help info
	CommandH dollyconf.Command = "-h"
	// CommandHelp - print help info
	CommandHelp = "help"
	// CommandPrint - print command line arguments with optional checking
	CommandPrint = "print"
)

const (
	// FlagCheckargs - do arguments checking
	FlagCheckargs dollyconf.Flag = "-checkargs"
	// FlagF - single float
	FlagF = "-f"
	// FlagFl - float list
	FlagFl = "-fl"
	// FlagI - int string
	FlagI = "-i"
	// FlagIl - int list
	FlagIl = "-il"
	// FlagS - single string
	FlagS = "-s"
	// FlagSl - string list
	FlagSl = "-sl"
)

// Parse - processes command line arguments
func Parse(args []string) (res *parsed_data.ParsedData, err *dollyerr.Error) {
	appArgConfig := dollyconf.NewArgParserConfig(
		// appDescription
		dollyconf.ApplicationDescription{
			AppName:      "example",
			NameHelpInfo: "shows how parser generator works",
			DescriptionHelpInfo: []string{
				"you can write more detailed description here",
				"and use several paragraphs",
			},
		},
		// flagDescriptions
		map[dollyconf.Flag]*dollyconf.FlagDescription{
			FlagS: {
				DescriptionHelpInfo: "single string",
				ArgDescription: &dollyconf.ArgumentsDescription{
					AmountType:              dollyconf.ArgAmountTypeSingle,
					SynopsisHelpDescription: "str",
				},
			},
			FlagSl: {
				DescriptionHelpInfo: "string list",
				ArgDescription: &dollyconf.ArgumentsDescription{
					AmountType:              dollyconf.ArgAmountTypeList,
					SynopsisHelpDescription: "str",
				},
			},
			FlagI: {
				DescriptionHelpInfo: "int string",
				ArgDescription: &dollyconf.ArgumentsDescription{
					AmountType:              dollyconf.ArgAmountTypeSingle,
					SynopsisHelpDescription: "str",
				},
			},
			FlagIl: {
				DescriptionHelpInfo: "int list",
				ArgDescription: &dollyconf.ArgumentsDescription{
					AmountType:              dollyconf.ArgAmountTypeList,
					SynopsisHelpDescription: "str",
				},
			},
			FlagF: {
				DescriptionHelpInfo: "single float",
				ArgDescription: &dollyconf.ArgumentsDescription{
					AmountType:              dollyconf.ArgAmountTypeSingle,
					SynopsisHelpDescription: "str",
				},
			},
			FlagFl: {
				DescriptionHelpInfo: "float list",
				ArgDescription: &dollyconf.ArgumentsDescription{
					AmountType:              dollyconf.ArgAmountTypeList,
					SynopsisHelpDescription: "str",
				},
			},
			FlagCheckargs: {
				DescriptionHelpInfo: "do arguments checking",
			},
		},
		// commandDescriptions
		[]*dollyconf.CommandDescription{
			{
				ID:                  CommandIDPrint,
				DescriptionHelpInfo: "print command line arguments with optional checking",
				Commands: map[dollyconf.Command]bool{
					CommandPrint: true,
				},
				OptionalFlags: map[dollyconf.Flag]bool{
					FlagS:         true,
					FlagSl:        true,
					FlagI:         true,
					FlagIl:        true,
					FlagF:         true,
					FlagFl:        true,
					FlagCheckargs: true,
				},
			},
		},
		// helpCommandDescription
		dollyconf.NewHelpCommandDescription(
			CommandIDPrintHelpInfo,
			map[dollyconf.Command]bool{
				CommandH:    true,
				CommandHelp: true,
			},
		),
		// namelessCommandDescription
		dollyconf.NewNamelessCommandDescription(
			CommandIDNamelessCommand,
			"checks arguments types",
			nil,
			nil,
			map[dollyconf.Flag]bool{
				FlagSl: true,
				FlagIl: true,
				FlagFl: true,
			},
		))

	if res, err = parser.Parse(appArgConfig, args); err != nil {
		return nil, err
	}

	if res.GetCommandID() == CommandIDPrintHelpInfo {
		var pageView views.PageView
		err = pageView.Init(tbd.NewTermBoxDecorator(), data.MakePage(appArgConfig))
		if err != nil {
			return nil, err
		}
		pageView.Run()

		return nil, nil
	}

	return res, nil
}
