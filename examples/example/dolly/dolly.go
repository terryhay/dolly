// This code was generated by dolly.generator. DO NOT EDIT

package dolly

import (
	apConf "github.com/terryhay/dolly/argparser/arg_parser_config"
	hp "github.com/terryhay/dolly/argparser/help_page"
	"github.com/terryhay/dolly/argparser/parsed"
	"github.com/terryhay/dolly/argparser/parser"
	pgv "github.com/terryhay/dolly/man_style_help/page_view"
	tbd "github.com/terryhay/dolly/man_style_help/termbox_decorator"
	coty "github.com/terryhay/dolly/tools/common_types"
)

const (
	// NameApp - name of the application
	NameApp coty.NameApp = "example"
)

const (
	// NameCommandHLw - print help info
	NameCommandHLw coty.NameCommand = "-h"

	// NameCommandHelp - print help info
	NameCommandHelp coty.NameCommand = "help"

	// NameCommandNameless - checks arguments types
	NameCommandNameless coty.NameCommand = "Nameless"

	// NameCommandPrint - print command line arguments with optional checking
	NameCommandPrint coty.NameCommand = "print"
)

const (
	// IDPlaceholderCheckargs - -checkargs
	IDPlaceholderCheckargs coty.IDPlaceholder = iota + 1

	// IDPlaceholderFloatList - float_list
	IDPlaceholderFloatList

	// IDPlaceholderFloatSingle - float_single
	IDPlaceholderFloatSingle

	// IDPlaceholderIntList - int_list
	IDPlaceholderIntList

	// IDPlaceholderIntSingle - int_single
	IDPlaceholderIntSingle

	// IDPlaceholderStringList - string_list
	IDPlaceholderStringList

	// IDPlaceholderStringSingle - string_single
	IDPlaceholderStringSingle
)

const (
	// NameFlagCheckargs - do arguments checking
	NameFlagCheckargs coty.NameFlag = "--checkargs"

	// NameFlagFLw - single float
	NameFlagFLw coty.NameFlag = "-f"

	// NameFlagFl - float list
	NameFlagFl coty.NameFlag = "-fl"

	// NameFlagILw - int string
	NameFlagILw coty.NameFlag = "-i"

	// NameFlagIl - int list
	NameFlagIl coty.NameFlag = "-il"

	// NameFlagSLw - single string
	NameFlagSLw coty.NameFlag = "-s"

	// NameFlagSl - string list
	NameFlagSl coty.NameFlag = "-sl"
)

// Parse processes command line arguments
func Parse(args []string) (*parsed.Result, error) {
	appArgConfig := apConf.MakeArgParserConfig(apConf.ArgParserConfigOpt{
		App: apConf.ApplicationOpt{
			AppName:         NameApp,
			InfoChapterNAME: "shows how parser generator works",
		},
		CommandNameless: &apConf.NamelessCommandOpt{
			HelpInfo: "checks arguments types",
			Placeholders: []*apConf.PlaceholderOpt{
				{
					ID: IDPlaceholderFloatList,
					FlagsByNames: map[coty.NameFlag]*apConf.FlagOpt{
						NameFlagFl: {
							NameMain: NameFlagFl,
							HelpInfo: "float list",
						},
					},
				},
				{
					ID: IDPlaceholderIntList,
					FlagsByNames: map[coty.NameFlag]*apConf.FlagOpt{
						NameFlagIl: {
							NameMain: NameFlagIl,
							HelpInfo: "int list",
						},
					},
				},
				{
					ID: IDPlaceholderStringList,
					FlagsByNames: map[coty.NameFlag]*apConf.FlagOpt{
						NameFlagSl: {
							NameMain: NameFlagSl,
							HelpInfo: "string list",
						},
					},
				},
			},
		},
		Commands: []*apConf.CommandOpt{
			{
				NameMain: NameCommandPrint,
				HelpInfo: "print command line arguments with optional checking",
				Placeholders: []*apConf.PlaceholderOpt{
					{
						ID: IDPlaceholderCheckargs,
						FlagsByNames: map[coty.NameFlag]*apConf.FlagOpt{
							NameFlagCheckargs: {
								NameMain: NameFlagCheckargs,
								HelpInfo: "do arguments checking",
							},
						},
					},
					{
						ID: IDPlaceholderFloatList,
						FlagsByNames: map[coty.NameFlag]*apConf.FlagOpt{
							NameFlagFl: {
								NameMain: NameFlagFl,
								HelpInfo: "float list",
							},
						},
					},
					{
						ID: IDPlaceholderFloatSingle,
						FlagsByNames: map[coty.NameFlag]*apConf.FlagOpt{
							NameFlagFLw: {
								NameMain: NameFlagFLw,
								HelpInfo: "single float",
							},
						},
					},
					{
						ID: IDPlaceholderIntList,
						FlagsByNames: map[coty.NameFlag]*apConf.FlagOpt{
							NameFlagIl: {
								NameMain: NameFlagIl,
								HelpInfo: "int list",
							},
						},
					},
					{
						ID: IDPlaceholderIntSingle,
						FlagsByNames: map[coty.NameFlag]*apConf.FlagOpt{
							NameFlagILw: {
								NameMain: NameFlagILw,
								HelpInfo: "int string",
							},
						},
					},
					{
						ID: IDPlaceholderStringList,
						FlagsByNames: map[coty.NameFlag]*apConf.FlagOpt{
							NameFlagSl: {
								NameMain: NameFlagSl,
								HelpInfo: "string list",
							},
						},
					},
					{
						ID: IDPlaceholderStringSingle,
						FlagsByNames: map[coty.NameFlag]*apConf.FlagOpt{
							NameFlagSLw: {
								NameMain: NameFlagSLw,
								HelpInfo: "single string",
							},
						},
					},
				},
			},
		},
		CommandHelpOut: &apConf.HelpOutCommandOpt{
			NameMain: NameCommandHelp,
			NamesAdditional: map[coty.NameCommand]struct{}{
				NameCommandHelp: {},
				NameCommandHLw:  {},
			},
		},
	})

	res, errParse := parser.Parse(appArgConfig, args)
	if errParse != nil {
		return nil, errParse
	}

	if res.GetCommandMainName() == NameCommandHelp {
		pageView, err := pgv.NewPageView(tbd.NewTermBoxDecorator(), NameApp, hp.MakeBody(appArgConfig))
		if err != nil {
			return nil, err
		}

		if err = pageView.Run(); err != nil {
			return nil, err
		}

		return nil, nil
	}

	return res, nil
}
