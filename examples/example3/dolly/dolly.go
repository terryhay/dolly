// This code was generated by dolly.generator. DO NOT EDIT

package dolly

import (
	apConf "github.com/terryhay/dolly/argparser/arg_parser_config"
	"github.com/terryhay/dolly/argparser/parsed"
	"github.com/terryhay/dolly/argparser/parser"
	helpOut "github.com/terryhay/dolly/argparser/plain_help_out"
	coty "github.com/terryhay/dolly/tools/common_types"
	fmtd "github.com/terryhay/dolly/tools/fmt_decorator"
)

const (
	// NameApp - name of the application
	NameApp coty.NameApp = "example3"
)

const (
	// NameCommandHLw - print help info
	NameCommandHLw coty.NameCommand = "-h"

	// NameCommandHelp - print help info
	NameCommandHelp coty.NameCommand = "help"

	// NameCommandNameless - runs example3
	NameCommandNameless coty.NameCommand = "Nameless"
)

// Parse processes command line arguments
func Parse(args []string) (*parsed.Result, error) {
	appArgConfig := apConf.MakeArgParserConfig(apConf.ArgParserConfigOpt{
		App: apConf.ApplicationOpt{
			AppName:         NameApp,
			InfoChapterNAME: "shows how parser generator works without commands and flags",
		},
		CommandNameless: &apConf.NamelessCommandOpt{
			HelpInfo: "runs example3",
		},
		CommandHelpOut: &apConf.HelpOutCommandOpt{
			NameMain: NameCommandHelp,
			NamesAdditional: map[coty.NameCommand]struct{}{
				NameCommandHelp: {},
				NameCommandHLw:  {},
			},
		},
	})

	res, errParse := parser.Parse(appArgConfig, args)
	if errParse != nil {
		return nil, errParse
	}

	if res.GetCommandMainName() == NameCommandHelp {
		helpOut.PrintHelpInfo(fmtd.New(), appArgConfig)
		return nil, nil
	}

	return res, nil
}
